// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ApexLexer.flex

package com.iishanto.apex.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.iishanto.apex.psi.ApexTypes.*;


public class _ApexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\4\22\0\1\1\1\5"+
    "\2\0\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\6"+
    "\1\33\4\6\1\34\2\6\1\35\1\36\5\6\1\37"+
    "\1\40\6\6\1\41\1\0\1\42\1\43\1\6\1\0"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\6\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\6\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\6\1\73\1\74\1\75\7\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\7\5"+
    "\1\26\1\27\1\30\21\5\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\0\1\47\1\50\1\0\1\51"+
    "\1\52\1\53\1\0\5\5\1\54\7\5\1\55\10\5"+
    "\1\56\7\5\1\57\4\5\1\60\17\5\1\61\1\62"+
    "\1\63\1\0\1\64\1\65\1\66\1\0\10\5\1\67"+
    "\1\70\17\5\1\71\4\5\1\72\15\5\1\73\7\5"+
    "\1\74\1\75\1\76\1\5\1\77\3\5\1\100\1\101"+
    "\1\5\1\102\10\5\1\103\1\104\10\5\1\105\7\5"+
    "\1\106\3\5\1\107\4\5\1\110\1\5\1\111\7\5"+
    "\1\112\1\5\1\113\1\114\1\115\3\5\1\116\1\117"+
    "\13\5\1\120\1\121\7\5\1\122\4\5\1\123\1\5"+
    "\1\124\1\5\1\125\1\5\1\126\2\5\1\127\1\5"+
    "\1\130\4\5\1\131\1\132\1\5\1\133\5\5\1\134"+
    "\2\5\1\135\1\5\1\136\1\137\2\5\1\140\1\141"+
    "\3\5\1\142\1\5\1\143\1\5\1\144\3\5\1\145"+
    "\1\146\1\147\1\150\1\151\6\5\1\152\1\153\2\5"+
    "\1\154\1\155\1\156\1\5\1\157\1\160\3\5\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\76"+
    "\0\76\0\u01b2\0\u01f0\0\76\0\u022e\0\u026c\0\u02aa\0\u02e8"+
    "\0\76\0\76\0\u0326\0\u0364\0\u03a2\0\76\0\76\0\u03e0"+
    "\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\76\0\76"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744"+
    "\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934"+
    "\0\u0972\0\u09b0\0\76\0\u09ee\0\76\0\u0a2c\0\76\0\76"+
    "\0\u0174\0\u0174\0\76\0\76\0\76\0\76\0\u026c\0\76"+
    "\0\76\0\u0a6a\0\u0aa8\0\76\0\u0ae6\0\76\0\u0b24\0\76"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\370\0\u0cd6"+
    "\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\76\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\370"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\370"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\370\0\u1322\0\u1360\0\u139e"+
    "\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\76\0\76\0\76\0\u16c4"+
    "\0\76\0\76\0\76\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\370\0\370\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\370\0\u1cd2\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\370\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2"+
    "\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2"+
    "\0\370\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264"+
    "\0\u0a6a\0\76\0\370\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\370\0\370\0\u23d8\0\370\0\u2416\0\u2454\0\u2492\0\u24d0"+
    "\0\u250e\0\u254c\0\u258a\0\u25c8\0\370\0\370\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\370\0\u27f6"+
    "\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\370\0\u29a8"+
    "\0\u29e6\0\u2a24\0\370\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\370"+
    "\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u2d4a\0\370\0\u2d88\0\370\0\370\0\370\0\u2dc6\0\u2e04"+
    "\0\u2e42\0\370\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\370\0\370"+
    "\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\370"+
    "\0\u331a\0\u3358\0\u3396\0\u33d4\0\370\0\u3412\0\370\0\u3450"+
    "\0\370\0\u348e\0\370\0\u34cc\0\u350a\0\370\0\u3548\0\370"+
    "\0\u3586\0\u35c4\0\u3602\0\u3640\0\370\0\370\0\u367e\0\370"+
    "\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\370\0\u37f2\0\u3830"+
    "\0\370\0\u386e\0\370\0\370\0\u38ac\0\u38ea\0\370\0\370"+
    "\0\u3928\0\u3966\0\u39a4\0\370\0\u39e2\0\370\0\u3a20\0\370"+
    "\0\u3a5e\0\u3a9c\0\u3ada\0\370\0\370\0\370\0\370\0\370"+
    "\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\370\0\370"+
    "\0\u3c8c\0\u3cca\0\370\0\370\0\370\0\u3d08\0\370\0\370"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\5\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\5\1\51\3\5\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\2\5\1\63"+
    "\1\64\1\65\77\0\2\3\1\0\1\3\116\0\1\66"+
    "\56\0\1\5\12\0\1\5\7\0\10\5\3\0\27\5"+
    "\12\0\1\67\15\0\1\70\50\0\2\71\3\0\3\71"+
    "\1\72\65\71\25\0\1\73\64\0\1\74\10\0\1\75"+
    "\66\0\1\76\1\77\1\0\1\20\3\0\1\100\7\0"+
    "\1\101\61\0\1\77\67\0\1\102\4\0\1\103\4\0"+
    "\1\104\67\0\1\77\1\0\1\20\13\0\1\101\64\0"+
    "\1\105\1\106\75\0\1\107\75\0\1\110\1\111\55\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\12\5\1\112"+
    "\2\5\1\113\11\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\1\114\3\5\1\115\10\5\1\116\11\5"+
    "\11\0\1\5\12\0\1\5\7\0\2\5\1\117\5\5"+
    "\3\0\14\5\1\120\12\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\10\5\1\121\4\5\1\122\11\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\1\123"+
    "\26\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\4\5\1\124\14\5\1\125\5\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\10\5\1\126\16\5\30\0"+
    "\1\127\56\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\1\5\1\130\3\5\1\131\21\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\4\5\1\132\12\5\1\133"+
    "\7\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\1\134\11\5\1\135\2\5\1\136\11\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\4\5\1\137\10\5"+
    "\1\140\11\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\12\5\1\141\1\5\1\142\10\5\1\143\1\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\1\144"+
    "\7\5\1\145\4\5\1\146\11\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\12\5\1\147\14\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\5\5\1\150"+
    "\5\5\1\151\1\152\12\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\4\5\1\153\15\5\1\154\4\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\14\5"+
    "\1\155\12\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\17\5\1\156\2\5\1\157\4\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\4\5\1\160\22\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\7\5"+
    "\1\161\11\5\1\162\1\163\4\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\7\5\1\164\7\5\1\165"+
    "\6\5\1\166\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\14\5\1\167\1\5\1\170\10\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\10\5\1\171\4\5"+
    "\1\172\11\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\7\5\1\173\1\174\16\5\30\0\1\175\46\0"+
    "\1\176\26\0\1\177\50\0\3\102\2\0\6\102\1\200"+
    "\62\102\2\103\3\0\71\103\25\0\1\201\75\0\1\202"+
    "\75\0\1\203\1\204\55\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\15\5\1\205\11\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\15\5\1\206\11\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\21\5\1\207"+
    "\5\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\2\5\1\210\24\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\22\5\1\211\4\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\21\5\1\212\5\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\20\5\1\213"+
    "\6\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\14\5\1\214\12\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\16\5\1\215\10\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\21\5\1\216\5\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\17\5\1\217"+
    "\7\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\13\5\1\220\13\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\20\5\1\221\6\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\21\5\1\222\5\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\5\5\1\223"+
    "\21\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\4\5\1\224\22\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\21\5\1\225\5\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\1\226\26\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\14\5\1\227\12\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\12\5"+
    "\1\230\14\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\20\5\1\231\6\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\22\5\1\232\4\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\21\5\1\233\5\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\12\5"+
    "\1\234\14\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\14\5\1\235\12\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\17\5\1\236\7\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\15\5\1\237\11\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\16\5"+
    "\1\240\10\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\20\5\1\241\1\242\5\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\24\5\1\243\2\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\12\5\1\244"+
    "\14\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\10\5\1\245\4\5\1\246\11\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\1\5\1\247\25\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\21\5\1\250"+
    "\5\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\1\251\26\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\1\252\26\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\16\5\1\253\10\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\10\5\1\254\6\5\1\255"+
    "\7\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\1\256\7\5\1\257\11\5\1\260\3\5\1\261\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\16\5\1\262"+
    "\10\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\3\5\1\263\23\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\3\5\1\264\23\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\17\5\1\265\7\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\10\5\1\266"+
    "\16\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\10\5\1\267\16\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\21\5\1\270\5\5\3\0\3\102\2\0"+
    "\6\102\1\200\4\102\1\271\55\102\25\0\1\272\56\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\1\5\1\273"+
    "\25\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\12\5\1\274\14\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\4\5\1\275\22\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\10\5\1\276\16\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\1\5\1\277"+
    "\25\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\4\5\1\300\22\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\21\5\1\301\5\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\6\5\1\302\20\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\10\5\1\303"+
    "\16\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\4\5\1\304\22\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\21\5\1\305\5\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\4\5\1\306\22\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\15\5\1\307"+
    "\11\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\1\310\26\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\2\5\1\311\24\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\20\5\1\312\6\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\21\5\1\313\5\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\4\5"+
    "\1\314\22\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\4\5\1\315\22\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\13\5\1\316\13\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\4\5\1\317\22\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\20\5"+
    "\1\320\6\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\1\321\26\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\1\5\1\322\25\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\12\5\1\323\14\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\4\5\1\324"+
    "\14\5\1\325\5\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\4\5\1\326\22\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\12\5\1\327\14\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\23\5\1\330"+
    "\3\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\21\5\1\331\5\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\12\5\1\332\14\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\22\5\1\333\4\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\17\5\1\334"+
    "\7\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\21\5\1\335\5\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\4\5\1\336\22\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\20\5\1\337\6\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\15\5\1\340"+
    "\11\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\14\5\1\341\12\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\6\5\1\342\20\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\4\5\1\343\22\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\4\5\1\344"+
    "\22\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\4\5\1\345\22\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\1\346\26\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\21\5\1\347\5\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\3\5\1\350\23\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\12\5"+
    "\1\351\14\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\7\5\1\352\17\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\4\5\1\353\22\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\21\5\1\354\5\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\13\5"+
    "\1\355\13\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\12\5\1\356\14\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\6\5\1\357\20\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\14\5\1\360\12\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\17\5"+
    "\1\361\7\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\17\5\1\362\7\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\17\5\1\363\7\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\11\5\1\364\15\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\7\5"+
    "\1\365\17\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\20\5\1\366\6\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\10\5\1\367\16\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\21\5\1\370\5\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\14\5"+
    "\1\371\12\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\4\5\1\372\22\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\12\5\1\373\14\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\1\374\26\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\4\5\1\375"+
    "\22\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\17\5\1\376\7\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\1\377\26\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\17\5\1\u0100\7\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\1\u0101\26\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\4\5\1\u0102"+
    "\22\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\10\5\1\u0103\16\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\17\5\1\u0104\7\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\10\5\1\u0105\16\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\10\5\1\u0106"+
    "\16\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\17\5\1\u0107\7\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\24\5\1\u0108\2\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\20\5\1\u0109\6\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\6\5\1\u010a"+
    "\20\5\11\0\1\5\12\0\1\5\7\0\1\u010b\3\5"+
    "\1\u010c\3\5\3\0\27\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\12\5\1\u010d\14\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\21\5\1\u010e\5\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\22\5"+
    "\1\u010f\4\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\4\5\1\u0110\22\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\15\5\1\u0111\11\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\1\u0112\26\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\10\5\1\u0113"+
    "\16\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\1\u0114\26\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\4\5\1\u0115\22\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\4\5\1\u0116\22\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\6\5\1\u0117\20\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\1\u0118"+
    "\26\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\4\5\1\u0119\22\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\14\5\1\u011a\12\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\4\5\1\u011b\22\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\3\5\1\u011c"+
    "\23\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\12\5\1\u011d\14\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\12\5\1\u011e\14\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\13\5\1\u011f\13\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\21\5\1\u0120"+
    "\5\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\14\5\1\u0121\12\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\5\5\1\u0122\21\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\21\5\1\u0123\5\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\2\5\1\u0124"+
    "\24\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\2\5\1\u0125\24\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\14\5\1\u0126\12\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\14\5\1\u0127\12\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\2\5\1\u0128"+
    "\24\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\10\5\1\u0129\16\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\4\5\1\u012a\22\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\17\5\1\u012b\7\5\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\10\5\1\u012c"+
    "\16\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\4\5\1\u012d\22\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\4\5\1\u012e\22\5\11\0\1\5\12\0"+
    "\1\5\7\0\10\5\3\0\1\u012f\26\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\22\5\1\u0130\4\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\14\5"+
    "\1\u0131\12\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\13\5\1\u0132\13\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\12\5\1\u0133\14\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\17\5\1\u0134\7\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\2\5"+
    "\1\u0135\24\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\22\5\1\u0136\4\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\20\5\1\u0137\6\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\26\5\1\u0138\11\0"+
    "\1\5\12\0\1\5\7\0\10\5\3\0\4\5\1\u0139"+
    "\22\5\11\0\1\5\12\0\1\5\7\0\10\5\3\0"+
    "\2\5\1\u013a\24\5\11\0\1\5\12\0\1\5\7\0"+
    "\10\5\3\0\1\u013b\26\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\4\5\1\u013c\22\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\21\5\1\u013d\5\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\6\5"+
    "\1\u013e\20\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\4\5\1\u013f\22\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\17\5\1\u0140\7\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\6\5\1\u0141\20\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\20\5"+
    "\1\u0142\6\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\21\5\1\u0143\5\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\12\5\1\u0144\14\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\21\5\1\u0145\5\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\4\5"+
    "\1\u0146\22\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\21\5\1\u0147\5\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\4\5\1\u0148\22\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\14\5\1\u0149\12\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\4\5"+
    "\1\u014a\22\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\2\5\1\u014b\24\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\4\5\1\u014c\22\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\14\5\1\u014d\12\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\22\5"+
    "\1\u014e\4\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\21\5\1\u014f\5\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\4\5\1\u0150\22\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\21\5\1\u0151\5\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\15\5"+
    "\1\u0152\11\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\4\5\1\u0153\22\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\3\5\1\u0154\23\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\21\5\1\u0155\5\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\13\5"+
    "\1\u0156\13\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\20\5\1\u0157\6\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\5\5\1\u0158\21\5\11\0\1\5"+
    "\12\0\1\5\7\0\10\5\3\0\4\5\1\u0159\22\5"+
    "\11\0\1\5\12\0\1\5\7\0\10\5\3\0\14\5"+
    "\1\u015a\12\5\11\0\1\5\12\0\1\5\7\0\10\5"+
    "\3\0\21\5\1\u015b\5\5\11\0\1\5\12\0\1\5"+
    "\7\0\10\5\3\0\20\5\1\u015c\6\5\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15872];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\5\1\2\11\2\1\1\11\4\1\2\11"+
    "\3\1\2\11\7\1\2\11\22\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\0\1\1\4\11\1\1\2\11\1\0"+
    "\1\1\1\11\1\0\1\11\1\1\1\11\1\0\15\1"+
    "\1\11\45\1\3\11\1\0\3\11\1\0\65\1\1\11"+
    "\242\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _ApexLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ApexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return INTEGER_LITERAL;
            }
          // fall through
          case 114: break;
          case 2:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 115: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 116: break;
          case 4:
            { return OPERATOR_NOT;
            }
          // fall through
          case 117: break;
          case 5:
            { return IDENTIFIER;
            }
          // fall through
          case 118: break;
          case 6:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 119: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 120: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 121: break;
          case 9:
            { return OPERATOR_MULTIPLICATION;
            }
          // fall through
          case 122: break;
          case 10:
            { return OPERATOR_ADDITION;
            }
          // fall through
          case 123: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 124: break;
          case 12:
            { return OPERATOR_SUBTRACTION;
            }
          // fall through
          case 125: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 126: break;
          case 14:
            { return OPERATOR_DIVSION;
            }
          // fall through
          case 127: break;
          case 15:
            { return OPERATOR_COLON;
            }
          // fall through
          case 128: break;
          case 16:
            { return SEMI;
            }
          // fall through
          case 129: break;
          case 17:
            { return OPERATOR_LESS_THAN;
            }
          // fall through
          case 130: break;
          case 18:
            { return OPERATOR_ASSIGNMENT;
            }
          // fall through
          case 131: break;
          case 19:
            { return OPERATOR_GREATER_THAN;
            }
          // fall through
          case 132: break;
          case 20:
            { return OPERATOR_TERNARY;
            }
          // fall through
          case 133: break;
          case 21:
            { return AT_SIGN;
            }
          // fall through
          case 134: break;
          case 22:
            { return LBRACK;
            }
          // fall through
          case 135: break;
          case 23:
            { return RBRACK;
            }
          // fall through
          case 136: break;
          case 24:
            { return OPERATOR_BITWISE_EXCLUSIVE_OR1;
            }
          // fall through
          case 137: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 138: break;
          case 26:
            { return OPERATOR_BITWISE_OR;
            }
          // fall through
          case 139: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 140: break;
          case 28:
            { return OPERATOR_INEQUALITY;
            }
          // fall through
          case 141: break;
          case 29:
            { return OPERATOR_AND;
            }
          // fall through
          case 142: break;
          case 30:
            { return OPERATOR_AND_ASSIGNMENT;
            }
          // fall through
          case 143: break;
          case 31:
            { return STRING_LITERAL;
            }
          // fall through
          case 144: break;
          case 32:
            { return OPERATOR_MULTIPLICATION_ASSIGNMENT;
            }
          // fall through
          case 145: break;
          case 33:
            { return OPERATOR_INCREMENT;
            }
          // fall through
          case 146: break;
          case 34:
            { return OPERATOR_ADDITION_ASSIGNMENT;
            }
          // fall through
          case 147: break;
          case 35:
            { return OPERATOR_DECREMENT;
            }
          // fall through
          case 148: break;
          case 36:
            { return DECIMAL_LITERAL;
            }
          // fall through
          case 149: break;
          case 37:
            { return OPERATOR_SUBTRACTION_ASSIGNMENT;
            }
          // fall through
          case 150: break;
          case 38:
            { return LONG_LITERAL;
            }
          // fall through
          case 151: break;
          case 39:
            { return LINE_COMMENT;
            }
          // fall through
          case 152: break;
          case 40:
            { return OPERATOR_DIVISION_ASSIGNMENT;
            }
          // fall through
          case 153: break;
          case 41:
            { return OPERATOR_LESS_THAN_EQUAL;
            }
          // fall through
          case 154: break;
          case 42:
            { return OPERATOR_EQUALITY;
            }
          // fall through
          case 155: break;
          case 43:
            { return OPERATOR_GREATER_THAN_EQUAL;
            }
          // fall through
          case 156: break;
          case 44:
            { return ID;
            }
          // fall through
          case 157: break;
          case 45:
            { return OPERATOR_BITWISE_EXCLUSIVE_OR2;
            }
          // fall through
          case 158: break;
          case 46:
            { return DO;
            }
          // fall through
          case 159: break;
          case 47:
            { return IF;
            }
          // fall through
          case 160: break;
          case 48:
            { return ON;
            }
          // fall through
          case 161: break;
          case 49:
            { return OPERATOR_OR_ASSIGNMENT;
            }
          // fall through
          case 162: break;
          case 50:
            { return OPERATOR_OR;
            }
          // fall through
          case 163: break;
          case 51:
            { return OPERATOR_EXACT_INEQUALITY;
            }
          // fall through
          case 164: break;
          case 52:
            { return OPERATOR_BITWISE_SHIFT_LEFT_ASSIGNMENT;
            }
          // fall through
          case 165: break;
          case 53:
            { return OPERATOR_EXACT_EQUALITY;
            }
          // fall through
          case 166: break;
          case 54:
            { return OPERATOR_BITWISE_SHIFT_RIGHT_ASSIGNMENT;
            }
          // fall through
          case 167: break;
          case 55:
            { return MAP;
            }
          // fall through
          case 168: break;
          case 56:
            { return SET;
            }
          // fall through
          case 169: break;
          case 57:
            { return FOR;
            }
          // fall through
          case 170: break;
          case 58:
            { return NEW;
            }
          // fall through
          case 171: break;
          case 59:
            { return TRY;
            }
          // fall through
          case 172: break;
          case 60:
            { return COMMENT;
            }
          // fall through
          case 173: break;
          case 61:
            { return OPERATOR_BITWISE_SHIFT_RIGHT_UNSIGNED_ASSIGNMENT;
            }
          // fall through
          case 174: break;
          case 62:
            { return BLOB;
            }
          // fall through
          case 175: break;
          case 63:
            { return DATE;
            }
          // fall through
          case 176: break;
          case 64:
            { return LIST;
            }
          // fall through
          case 177: break;
          case 65:
            { return LONG;
            }
          // fall through
          case 178: break;
          case 66:
            { return TIME;
            }
          // fall through
          case 179: break;
          case 67:
            { return ELSE;
            }
          // fall through
          case 180: break;
          case 68:
            { return ENUM;
            }
          // fall through
          case 181: break;
          case 69:
            { return NULL;
            }
          // fall through
          case 182: break;
          case 70:
            { return THIS;
            }
          // fall through
          case 183: break;
          case 71:
            { return TRUE;
            }
          // fall through
          case 184: break;
          case 72:
            { return VOID;
            }
          // fall through
          case 185: break;
          case 73:
            { return WITH;
            }
          // fall through
          case 186: break;
          case 74:
            { return AFTER;
            }
          // fall through
          case 187: break;
          case 75:
            { return BREAK;
            }
          // fall through
          case 188: break;
          case 76:
            { return CATCH;
            }
          // fall through
          case 189: break;
          case 77:
            { return CLASS_KEYWORD;
            }
          // fall through
          case 190: break;
          case 78:
            { return FALSE;
            }
          // fall through
          case 191: break;
          case 79:
            { return FINAL;
            }
          // fall through
          case 192: break;
          case 80:
            { return SUPER;
            }
          // fall through
          case 193: break;
          case 81:
            { return THROW;
            }
          // fall through
          case 194: break;
          case 82:
            { return WHILE;
            }
          // fall through
          case 195: break;
          case 83:
            { return DOUBLE;
            }
          // fall through
          case 196: break;
          case 84:
            { return STRING;
            }
          // fall through
          case 197: break;
          case 85:
            { return BEFORE;
            }
          // fall through
          case 198: break;
          case 86:
            { return DELETE;
            }
          // fall through
          case 199: break;
          case 87:
            { return GLOBAL;
            }
          // fall through
          case 200: break;
          case 88:
            { return INSERT;
            }
          // fall through
          case 201: break;
          case 89:
            { return PUBLIC;
            }
          // fall through
          case 202: break;
          case 90:
            { return RETURN;
            }
          // fall through
          case 203: break;
          case 91:
            { return STATIC;
            }
          // fall through
          case 204: break;
          case 92:
            { return UPDATE;
            }
          // fall through
          case 205: break;
          case 93:
            { return BOOLEAN;
            }
          // fall through
          case 206: break;
          case 94:
            { return DECIMAL;
            }
          // fall through
          case 207: break;
          case 95:
            { return INTEGER;
            }
          // fall through
          case 208: break;
          case 96:
            { return EXTENDS;
            }
          // fall through
          case 209: break;
          case 97:
            { return FINALLY;
            }
          // fall through
          case 210: break;
          case 98:
            { return PRIVATE;
            }
          // fall through
          case 211: break;
          case 99:
            { return SHARING;
            }
          // fall through
          case 212: break;
          case 100:
            { return TRIGGER;
            }
          // fall through
          case 213: break;
          case 101:
            { return VIRTUAL;
            }
          // fall through
          case 214: break;
          case 102:
            { return WITHOUT;
            }
          // fall through
          case 215: break;
          case 103:
            { return DATETIME;
            }
          // fall through
          case 216: break;
          case 104:
            { return ABSTRACT;
            }
          // fall through
          case 217: break;
          case 105:
            { return CONTINUE;
            }
          // fall through
          case 218: break;
          case 106:
            { return TYPELIST;
            }
          // fall through
          case 219: break;
          case 107:
            { return UNDELETE;
            }
          // fall through
          case 220: break;
          case 108:
            { return INTERFACE;
            }
          // fall through
          case 221: break;
          case 109:
            { return PROTECTED;
            }
          // fall through
          case 222: break;
          case 110:
            { return TRANSIENT;
            }
          // fall through
          case 223: break;
          case 111:
            { return IMPLEMENTS;
            }
          // fall through
          case 224: break;
          case 112:
            { return INSTANCEOF;
            }
          // fall through
          case 225: break;
          case 113:
            { return TYPEARGUMENTS;
            }
          // fall through
          case 226: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
