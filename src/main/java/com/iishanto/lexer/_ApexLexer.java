/* The following code was generated by JFlex 1.4.3 on 2/24/14 8:50 PM */

package com.iishanto.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.iishanto.apex.psi.ApexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/24/14 8:50 PM from the specification file
 * <tt>/Users/mark/Projects/salesforce-plugin/salesforce-plugin/src/au/com/borner/salesforce/plugin/apex/lexer/_ApexLexer.flex</tt>
 */
public class _ApexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\40\2\0"+
    "\1\5\1\0\1\43\1\7\1\24\1\25\1\4\1\45\1\33\1\15"+
    "\1\16\1\3\12\6\1\42\1\32\1\37\1\35\1\36\1\41\1\34"+
    "\1\73\1\63\1\5\1\64\4\5\1\65\2\5\1\17\1\70\5\5"+
    "\1\66\1\67\6\5\1\30\1\0\1\31\1\46\1\5\1\0\1\22"+
    "\1\10\1\20\1\56\1\53\1\13\1\54\1\60\1\51\1\5\1\71"+
    "\1\21\1\62\1\12\1\55\1\47\1\5\1\14\1\23\1\11\1\50"+
    "\1\52\1\57\1\61\1\72\1\5\1\26\1\44\1\27\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\1\1\2"+
    "\5\6\1\7\1\10\4\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\17\6"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\0\1\41"+
    "\13\6\1\42\1\43\12\6\1\44\1\45\1\0\1\46"+
    "\1\0\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\5\6\1\57\7\6\1\60\1\6\1\61\10\6"+
    "\1\62\4\6\1\0\5\6\1\63\4\6\1\64\2\6"+
    "\1\65\13\6\1\66\1\67\1\0\1\70\1\71\30\6"+
    "\1\72\1\6\1\73\1\74\3\6\1\75\2\6\1\76"+
    "\1\6\1\77\3\6\1\100\1\101\10\6\1\102\12\6"+
    "\1\103\1\104\1\105\3\6\1\106\1\6\1\107\1\6"+
    "\1\110\4\6\1\111\1\112\3\6\1\113\2\6\1\114"+
    "\1\115\1\6\1\116\1\117\2\6\1\120\1\6\1\121"+
    "\17\6\1\122\6\6\1\123\5\6\1\124\2\6\1\125"+
    "\3\6\1\126\1\6\1\127\2\6\1\130\3\6\1\131"+
    "\1\132\4\6\1\133\1\6\1\134\1\6\1\135\2\6"+
    "\1\136\2\6\1\137\1\140\5\6\1\141\1\142\1\143"+
    "\1\144\1\6\1\145\1\146\1\6\1\147\1\6\1\150"+
    "\1\151\1\6\1\152\3\6\1\153\1\154\1\6\1\155"+
    "\1\156\3\6\1\157\1\160\2\6\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\74\0\74\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\74"+
    "\0\74\0\u0348\0\74\0\u01a4\0\u01a4\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\74\0\74\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\74\0\u0f78\0\74"+
    "\0\u0fb4\0\u0ff0\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u012c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u012c\0\u12fc"+
    "\0\u012c\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0"+
    "\0\u14dc\0\u012c\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u012c\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u012c\0\u1860\0\u189c\0\u012c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\74\0\74\0\u1b6c\0\74\0\74\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u012c\0\u2148\0\u012c"+
    "\0\u0a14\0\u2184\0\u21c0\0\u21fc\0\u012c\0\u2238\0\u2274\0\u012c"+
    "\0\u22b0\0\u012c\0\u22ec\0\u2328\0\u2364\0\u012c\0\u012c\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\74"+
    "\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724"+
    "\0\u2760\0\u279c\0\u012c\0\u012c\0\u012c\0\u27d8\0\u2814\0\u2850"+
    "\0\u288c\0\u28c8\0\u012c\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4"+
    "\0\u2a30\0\u012c\0\u012c\0\u2a6c\0\u2aa8\0\u2ae4\0\u012c\0\u2b20"+
    "\0\u2b5c\0\u012c\0\u2b98\0\u2bd4\0\u012c\0\u012c\0\u2c10\0\u2c4c"+
    "\0\u012c\0\u2c88\0\u012c\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94"+
    "\0\u2fd0\0\u300c\0\u012c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138"+
    "\0\u3174\0\u012c\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u012c"+
    "\0\u32dc\0\u3318\0\u012c\0\u3354\0\u3390\0\u33cc\0\u012c\0\u3408"+
    "\0\u012c\0\u3444\0\u3480\0\u012c\0\u34bc\0\u34f8\0\u3534\0\u012c"+
    "\0\u012c\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u012c\0\u3660\0\u012c"+
    "\0\u369c\0\u012c\0\u36d8\0\u3714\0\u012c\0\u3750\0\u378c\0\u012c"+
    "\0\u012c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u38f4\0\u012c\0\u012c\0\u3930\0\u012c\0\u396c"+
    "\0\u012c\0\u012c\0\u39a8\0\u012c\0\u39e4\0\u3a20\0\u3a5c\0\u012c"+
    "\0\u012c\0\u3a98\0\u012c\0\u012c\0\u3ad4\0\u3b10\0\u3b4c\0\u012c"+
    "\0\u012c\0\u3b88\0\u3bc4\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\6\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\3\6"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\3\6\75\0"+
    "\2\3\74\0\1\66\1\67\30\0\1\70\73\0\1\71"+
    "\43\0\2\6\1\0\5\6\2\0\5\6\23\0\25\6"+
    "\6\0\1\7\7\0\1\72\1\73\54\0\2\74\1\0"+
    "\4\74\1\75\64\74\5\0\2\6\1\0\4\6\1\76"+
    "\2\0\5\6\23\0\4\6\1\77\20\6\5\0\2\6"+
    "\1\0\4\6\1\100\2\0\5\6\23\0\11\6\1\101"+
    "\11\6\1\102\1\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\1\6\1\103\2\6\1\104\20\6\5\0"+
    "\2\6\1\0\5\6\2\0\3\6\1\105\1\6\23\0"+
    "\2\6\1\106\3\6\1\107\16\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\110\20\6\6\0"+
    "\1\7\6\0\1\111\1\72\1\73\15\0\1\112\44\0"+
    "\1\72\72\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\2\6\1\113\3\6\1\114\16\6\5\0\2\6\1\0"+
    "\5\6\2\0\2\6\1\115\1\116\1\6\23\0\6\6"+
    "\1\117\16\6\5\0\2\6\1\0\1\120\2\6\1\121"+
    "\1\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\1\6\1\122\3\6\2\0\5\6\23\0\1\6\1\123"+
    "\7\6\1\124\13\6\35\0\1\125\73\0\1\126\1\127"+
    "\72\0\1\130\1\0\1\131\71\0\1\132\73\0\1\133"+
    "\5\0\1\134\65\0\1\135\6\0\1\136\64\0\1\137"+
    "\7\0\1\140\63\0\1\141\43\0\2\6\1\0\4\6"+
    "\1\142\2\0\5\6\23\0\1\6\1\143\23\6\5\0"+
    "\2\6\1\0\2\6\1\144\2\6\2\0\5\6\23\0"+
    "\1\145\24\6\5\0\2\6\1\0\2\6\1\146\1\147"+
    "\1\6\2\0\5\6\23\0\13\6\1\150\11\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\2\6\1\151"+
    "\3\6\1\152\16\6\5\0\2\6\1\0\2\6\1\153"+
    "\2\6\2\0\2\6\1\154\2\6\23\0\12\6\1\155"+
    "\12\6\5\0\2\6\1\0\5\6\2\0\2\6\1\156"+
    "\2\6\23\0\25\6\5\0\2\6\1\0\2\6\1\157"+
    "\2\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\160\1\6\1\161"+
    "\16\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\2\6\1\162\6\6\1\163\13\6\5\0\2\6\1\0"+
    "\5\6\2\0\2\6\1\164\2\6\23\0\6\6\1\165"+
    "\16\6\5\0\2\6\1\0\5\6\2\0\3\6\1\166"+
    "\1\6\23\0\4\6\1\167\1\6\1\170\16\6\5\0"+
    "\2\6\1\0\2\6\1\171\2\6\2\0\5\6\23\0"+
    "\15\6\1\172\7\6\5\0\2\6\1\0\1\6\1\173"+
    "\3\6\2\0\5\6\23\0\4\6\1\174\20\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\2\6\1\175"+
    "\22\6\5\0\2\6\1\0\5\6\2\0\3\6\1\176"+
    "\1\6\23\0\25\6\2\66\1\0\71\66\4\67\1\177"+
    "\67\67\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\4\6\1\200\20\6\5\0\2\6\1\0\3\6\1\201"+
    "\1\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\3\6\1\202\1\6\23\0\1\6\1\203"+
    "\1\204\20\6\1\205\1\6\5\0\2\6\1\0\4\6"+
    "\1\206\2\0\5\6\23\0\2\6\1\207\22\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\1\210\24\6"+
    "\5\0\2\6\1\0\5\6\2\0\2\6\1\211\2\6"+
    "\23\0\25\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\10\6\1\212\14\6\5\0\2\6\1\0\5\6"+
    "\2\0\2\6\1\213\2\6\23\0\25\6\5\0\2\6"+
    "\1\0\2\6\1\214\2\6\2\0\5\6\23\0\25\6"+
    "\5\0\2\6\1\0\4\6\1\215\2\0\5\6\23\0"+
    "\25\6\5\0\2\6\1\0\1\6\1\216\3\6\2\0"+
    "\5\6\23\0\25\6\5\0\2\6\1\0\5\6\2\0"+
    "\4\6\1\217\23\0\25\6\5\0\2\6\1\0\2\6"+
    "\1\220\2\6\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\3\6\1\221\1\6\23\0\25\6"+
    "\5\0\2\6\1\0\1\6\1\222\3\6\2\0\5\6"+
    "\23\0\25\6\5\0\2\6\1\0\2\6\1\223\2\6"+
    "\2\0\5\6\23\0\25\6\5\0\2\6\1\0\5\6"+
    "\2\0\4\6\1\224\23\0\25\6\5\0\2\6\1\0"+
    "\1\6\1\225\3\6\2\0\5\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\3\6\1\226\1\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\1\227\24\6\5\0\2\6\1\0\5\6\2\0\3\6"+
    "\1\230\1\6\23\0\25\6\35\0\1\231\73\0\1\232"+
    "\1\233\72\0\1\234\73\0\1\235\43\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\2\6\1\236\3\6\1\237"+
    "\16\6\5\0\2\6\1\0\1\240\4\6\2\0\5\6"+
    "\23\0\25\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\7\6\1\241\15\6\5\0\2\6\1\0\5\6"+
    "\2\0\5\6\23\0\7\6\1\242\15\6\5\0\2\6"+
    "\1\0\1\6\1\243\3\6\2\0\4\6\1\244\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\1\245\24\6\5\0\2\6\1\0\4\6\1\246\2\0"+
    "\5\6\23\0\25\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\2\6\1\247\22\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\1\6\1\250\23\6\5\0"+
    "\2\6\1\0\5\6\2\0\4\6\1\251\23\0\25\6"+
    "\5\0\2\6\1\0\1\6\1\252\3\6\2\0\5\6"+
    "\23\0\25\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\6\6\1\253\16\6\5\0\2\6\1\0\5\6"+
    "\2\0\2\6\1\254\2\6\23\0\25\6\5\0\2\6"+
    "\1\0\1\6\1\255\3\6\2\0\5\6\23\0\25\6"+
    "\5\0\2\6\1\0\5\6\2\0\5\6\23\0\2\6"+
    "\1\256\22\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\6\6\1\257\16\6\5\0\2\6\1\0\5\6"+
    "\2\0\5\6\23\0\6\6\1\260\16\6\5\0\2\6"+
    "\1\0\1\6\1\261\3\6\2\0\5\6\23\0\25\6"+
    "\5\0\2\6\1\0\5\6\2\0\1\6\1\262\3\6"+
    "\23\0\25\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\1\6\1\263\23\6\5\0\2\6\1\0\1\6"+
    "\1\264\3\6\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\4\6\1\265\2\0\5\6\23\0\25\6\5\0"+
    "\2\6\1\0\1\6\1\266\3\6\2\0\5\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\13\6\1\267\11\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\1\270\24\6\3\67\1\271\1\177\67\67"+
    "\5\0\2\6\1\0\5\6\2\0\3\6\1\272\1\6"+
    "\23\0\25\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\6\6\1\273\16\6\5\0\2\6\1\0\2\6"+
    "\1\274\2\6\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\5\6\23\0\4\6\1\275\20\6"+
    "\5\0\2\6\1\0\5\6\2\0\5\6\23\0\5\6"+
    "\1\276\17\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\6\6\1\277\16\6\5\0\2\6\1\0\5\6"+
    "\2\0\4\6\1\300\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\301\20\6\5\0"+
    "\2\6\1\0\5\6\2\0\2\6\1\302\2\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\4\6\1\303"+
    "\23\0\25\6\5\0\2\6\1\0\5\6\2\0\3\6"+
    "\1\304\1\6\23\0\25\6\5\0\2\6\1\0\5\6"+
    "\2\0\5\6\23\0\1\6\1\305\23\6\5\0\2\6"+
    "\1\0\1\6\1\306\3\6\2\0\5\6\23\0\25\6"+
    "\5\0\2\6\1\0\5\6\2\0\5\6\23\0\5\6"+
    "\1\307\17\6\5\0\2\6\1\0\5\6\2\0\4\6"+
    "\1\310\23\0\25\6\5\0\2\6\1\0\5\6\2\0"+
    "\1\6\1\311\3\6\23\0\25\6\5\0\2\6\1\0"+
    "\1\6\1\312\3\6\2\0\5\6\23\0\25\6\5\0"+
    "\2\6\1\0\1\6\1\313\3\6\2\0\5\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\4\6\1\314\20\6\5\0\2\6\1\0\1\6\1\315"+
    "\3\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\316\20\6\5\0"+
    "\2\6\1\0\4\6\1\317\2\0\5\6\23\0\25\6"+
    "\35\0\1\320\43\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\3\6\1\321\21\6\5\0\2\6\1\0\1\6"+
    "\1\322\3\6\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\2\6\1\323\2\6\23\0\25\6"+
    "\5\0\2\6\1\0\5\6\2\0\5\6\23\0\4\6"+
    "\1\324\20\6\5\0\2\6\1\0\5\6\2\0\3\6"+
    "\1\325\1\6\23\0\25\6\5\0\2\6\1\0\5\6"+
    "\2\0\5\6\23\0\4\6\1\326\20\6\5\0\2\6"+
    "\1\0\1\6\1\327\3\6\2\0\5\6\23\0\4\6"+
    "\1\330\20\6\5\0\2\6\1\0\5\6\2\0\2\6"+
    "\1\331\2\6\23\0\25\6\5\0\2\6\1\0\1\6"+
    "\1\332\3\6\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\5\6\23\0\7\6\1\333\15\6"+
    "\5\0\2\6\1\0\5\6\2\0\5\6\23\0\13\6"+
    "\1\334\11\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\4\6\1\335\20\6\5\0\2\6\1\0\5\6"+
    "\2\0\5\6\23\0\4\6\1\336\20\6\5\0\2\6"+
    "\1\0\1\337\4\6\2\0\5\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\4\6\1\340"+
    "\20\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\11\6\1\341\13\6\5\0\2\6\1\0\5\6\2\0"+
    "\2\6\1\342\2\6\23\0\25\6\5\0\2\6\1\0"+
    "\1\343\4\6\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\2\6\1\344\2\6\23\0\25\6"+
    "\5\0\2\6\1\0\5\6\2\0\5\6\23\0\4\6"+
    "\1\345\20\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\2\6\1\346\22\6\5\0\2\6\1\0\1\347"+
    "\4\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\350\20\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\2\6\1\351"+
    "\22\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\4\6\1\352\20\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\22\6\1\353\2\6\5\0\2\6\1\0"+
    "\4\6\1\354\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\4\6\1\355\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\5\6\1\356"+
    "\17\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\10\6\1\357\14\6\5\0\2\6\1\0\5\6\2\0"+
    "\1\360\4\6\23\0\24\6\1\361\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\362\20\6\5\0"+
    "\2\6\1\0\5\6\2\0\2\6\1\363\2\6\23\0"+
    "\25\6\5\0\2\6\1\0\4\6\1\364\2\0\5\6"+
    "\23\0\25\6\5\0\2\6\1\0\5\6\2\0\4\6"+
    "\1\365\23\0\25\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\11\6\1\366\13\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\2\6\1\367\22\6\5\0"+
    "\2\6\1\0\4\6\1\370\2\0\5\6\23\0\25\6"+
    "\5\0\2\6\1\0\4\6\1\371\2\0\5\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\2\6\1\372\22\6\5\0\2\6\1\0\4\6\1\373"+
    "\2\0\5\6\23\0\25\6\5\0\2\6\1\0\5\6"+
    "\2\0\5\6\23\0\2\6\1\374\22\6\5\0\2\6"+
    "\1\0\5\6\2\0\3\6\1\375\1\6\23\0\25\6"+
    "\5\0\2\6\1\0\5\6\2\0\5\6\23\0\4\6"+
    "\1\376\20\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\2\6\1\377\22\6\5\0\2\6\1\0\5\6"+
    "\2\0\2\6\1\u0100\2\6\23\0\25\6\5\0\2\6"+
    "\1\0\1\6\1\u0101\3\6\2\0\5\6\23\0\25\6"+
    "\5\0\2\6\1\0\4\6\1\u0102\2\0\5\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\3\6\1\u0103"+
    "\1\6\23\0\25\6\5\0\2\6\1\0\4\6\1\u0104"+
    "\2\0\5\6\23\0\25\6\5\0\2\6\1\0\5\6"+
    "\2\0\5\6\23\0\4\6\1\u0105\20\6\5\0\2\6"+
    "\1\0\5\6\2\0\5\6\23\0\1\6\1\u0106\23\6"+
    "\5\0\2\6\1\0\2\6\1\u0107\2\6\2\0\5\6"+
    "\23\0\25\6\5\0\2\6\1\0\5\6\2\0\3\6"+
    "\1\u0108\1\6\23\0\25\6\5\0\2\6\1\0\1\6"+
    "\1\u0109\3\6\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\5\6\23\0\6\6\1\u010a\16\6"+
    "\5\0\2\6\1\0\5\6\2\0\5\6\23\0\4\6"+
    "\1\u010b\20\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\4\6\1\u010c\20\6\5\0\2\6\1\0\1\6"+
    "\1\u010d\3\6\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\5\6\23\0\13\6\1\u010e\11\6"+
    "\5\0\2\6\1\0\5\6\2\0\2\6\1\u010f\2\6"+
    "\23\0\25\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\5\6\1\u0110\17\6\5\0\2\6\1\0\2\6"+
    "\1\u0111\2\6\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\5\6\23\0\4\6\1\u0112\20\6"+
    "\5\0\2\6\1\0\5\6\2\0\5\6\23\0\2\6"+
    "\1\u0113\22\6\5\0\2\6\1\0\5\6\2\0\5\6"+
    "\23\0\4\6\1\u0114\20\6\5\0\2\6\1\0\5\6"+
    "\2\0\5\6\23\0\2\6\1\u0115\22\6\5\0\2\6"+
    "\1\0\4\6\1\u0116\2\0\5\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\2\6\1\u0117\2\6\23\0"+
    "\25\6\5\0\2\6\1\0\2\6\1\u0118\2\6\2\0"+
    "\5\6\23\0\25\6\5\0\2\6\1\0\2\6\1\u0119"+
    "\2\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\3\6\1\u011a\1\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\1\6\1\u011b\3\6\23\0"+
    "\25\6\5\0\2\6\1\0\2\6\1\u011c\2\6\2\0"+
    "\5\6\23\0\25\6\5\0\2\6\1\0\1\6\1\u011d"+
    "\3\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\1\6\1\u011e\3\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\1\6\1\u011f\3\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\4\6\1\u0120\20\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\4\6\1\u0121\20\6\5\0\2\6\1\0"+
    "\3\6\1\u0122\1\6\2\0\5\6\23\0\25\6\5\0"+
    "\2\6\1\0\2\6\1\u0123\2\6\2\0\5\6\23\0"+
    "\25\6\5\0\2\6\1\0\1\6\1\u0124\3\6\2\0"+
    "\5\6\23\0\25\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\13\6\1\u0125\11\6\5\0\2\6\1\0"+
    "\5\6\2\0\3\6\1\u0126\1\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\7\6\1\u0127"+
    "\15\6\5\0\2\6\1\0\5\6\2\0\2\6\1\u0128"+
    "\2\6\23\0\25\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\4\6\1\u0129\20\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\1\6\1\u012a\23\6\5\0"+
    "\2\6\1\0\5\6\2\0\3\6\1\u012b\1\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\2\6\1\u012c\22\6\5\0\2\6\1\0\5\6\2\0"+
    "\3\6\1\u012d\1\6\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\u012e\20\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\4\6\1\u012f"+
    "\20\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\5\6\1\u0130\17\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\4\6\1\u0131\20\6\5\0\2\6\1\0"+
    "\4\6\1\u0132\2\0\5\6\23\0\25\6\5\0\2\6"+
    "\1\0\5\6\2\0\4\6\1\u0133\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\5\6\1\u0134"+
    "\17\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\23\6\1\u0135\1\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\1\6\1\u0136\23\6\5\0\2\6\1\0"+
    "\5\6\2\0\1\6\1\u0137\3\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\5\6\1\u0138"+
    "\17\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\4\6\1\u0139\20\6\5\0\2\6\1\0\1\6\1\u013a"+
    "\3\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\1\6\1\u013b\3\6\2\0\5\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\3\6\1\u013c\1\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\1\6\1\u013d"+
    "\3\6\23\0\25\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\4\6\1\u013e\20\6\5\0\2\6\1\0"+
    "\5\6\2\0\2\6\1\u013f\2\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\4\6\1\u0140\23\0\25\6"+
    "\5\0\2\6\1\0\1\6\1\u0141\3\6\2\0\5\6"+
    "\23\0\25\6\5\0\2\6\1\0\2\6\1\u0142\2\6"+
    "\2\0\5\6\23\0\25\6\5\0\2\6\1\0\5\6"+
    "\2\0\5\6\23\0\13\6\1\u0143\11\6\5\0\2\6"+
    "\1\0\5\6\2\0\2\6\1\u0144\2\6\23\0\25\6"+
    "\5\0\2\6\1\0\4\6\1\u0145\2\0\5\6\23\0"+
    "\25\6\5\0\2\6\1\0\2\6\1\u0146\2\6\2\0"+
    "\5\6\23\0\25\6\5\0\2\6\1\0\1\6\1\u0147"+
    "\3\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\1\6\1\u0148\23\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\4\6\1\u0149"+
    "\20\6\5\0\2\6\1\0\1\6\1\u014a\3\6\2\0"+
    "\5\6\23\0\25\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\4\6\1\u014b\20\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\u014c\20\6\5\0"+
    "\2\6\1\0\5\6\2\0\1\6\1\u014d\3\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\4\6\1\u014e\20\6\5\0\2\6\1\0\2\6\1\u014f"+
    "\2\6\2\0\5\6\23\0\25\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\u0150\20\6\5\0"+
    "\2\6\1\0\1\6\1\u0151\3\6\2\0\5\6\23\0"+
    "\25\6\5\0\2\6\1\0\5\6\2\0\5\6\23\0"+
    "\13\6\1\u0152\11\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\7\6\1\u0153\15\6\5\0\2\6\1\0"+
    "\5\6\2\0\5\6\23\0\4\6\1\u0154\20\6\5\0"+
    "\2\6\1\0\5\6\2\0\5\6\23\0\6\6\1\u0155"+
    "\16\6\5\0\2\6\1\0\1\6\1\u0156\3\6\2\0"+
    "\5\6\23\0\25\6\5\0\2\6\1\0\5\6\2\0"+
    "\5\6\23\0\4\6\1\u0157\20\6\5\0\2\6\1\0"+
    "\3\6\1\u0158\1\6\2\0\5\6\23\0\25\6\5\0"+
    "\2\6\1\0\5\6\2\0\4\6\1\u0159\23\0\25\6"+
    "\5\0\2\6\1\0\2\6\1\u015a\2\6\2\0\5\6"+
    "\23\0\25\6\5\0\2\6\1\0\1\6\1\u015b\3\6"+
    "\2\0\5\6\23\0\25\6\5\0\2\6\1\0\5\6"+
    "\2\0\4\6\1\u015c\23\0\25\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\21\1\11\11\4\1\2\11\24\1\1\0"+
    "\2\11\1\1\1\11\1\0\14\1\2\11\13\1\1\11"+
    "\1\0\1\11\1\0\1\1\7\11\35\1\1\0\31\1"+
    "\2\11\1\0\2\11\62\1\1\11\214\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _ApexLexer() {
    this((java.io.Reader)null);
  }


  public _ApexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ApexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return IDENTIFIER;
          }
        case 114: break;
        case 66: 
          { return OPERATOR_BITWISE_SHIFT_RIGHT_UNSIGNED_ASSIGNMENT;
          }
        case 115: break;
        case 51: 
          { return TRY;
          }
        case 116: break;
        case 35: 
          { return OPERATOR_SUBTRACTION_ASSIGNMENT;
          }
        case 117: break;
        case 9: 
          { return LPAREN;
          }
        case 118: break;
        case 19: 
          { return OPERATOR_GREATER_THAN;
          }
        case 119: break;
        case 32: 
          { return LONG_LITERAL;
          }
        case 120: break;
        case 97: 
          { return VIRTUAL;
          }
        case 121: break;
        case 82: 
          { return WHILE;
          }
        case 122: break;
        case 61: 
          { return TRUE;
          }
        case 123: break;
        case 38: 
          { return OPERATOR_LESS_THAN_EQUAL;
          }
        case 124: break;
        case 73: 
          { return TIME;
          }
        case 125: break;
        case 54: 
          { return OPERATOR_EXACT_EQUALITY;
          }
        case 126: break;
        case 93: 
          { return TRIGGER;
          }
        case 127: break;
        case 57: 
          { return OPERATOR_EXACT_INEQUALITY;
          }
        case 128: break;
        case 83: 
          { return BEFORE;
          }
        case 129: break;
        case 99: 
          { return WITHOUT;
          }
        case 130: break;
        case 88: 
          { return INSERT;
          }
        case 131: break;
        case 85: 
          { return STATIC;
          }
        case 132: break;
        case 25: 
          { return OPERATOR_BITWISE_OR;
          }
        case 133: break;
        case 56: 
          { return OPERATOR_BITWISE_SHIFT_LEFT_ASSIGNMENT;
          }
        case 134: break;
        case 50: 
          { return ID;
          }
        case 135: break;
        case 74: 
          { return BREAK;
          }
        case 136: break;
        case 67: 
          { return VOID;
          }
        case 137: break;
        case 18: 
          { return OPERATOR_ASSIGNMENT;
          }
        case 138: break;
        case 42: 
          { return OPERATOR_OR_ASSIGNMENT;
          }
        case 139: break;
        case 5: 
          { return OPERATOR_MULTIPLICATION;
          }
        case 140: break;
        case 58: 
          { return SET;
          }
        case 141: break;
        case 26: 
          { return OPERATOR_ADDITION;
          }
        case 142: break;
        case 31: 
          { return DECIMAL_LITERAL;
          }
        case 143: break;
        case 98: 
          { return EXTENDS;
          }
        case 144: break;
        case 29: 
          { return OPERATOR_DIVISION_ASSIGNMENT;
          }
        case 145: break;
        case 107: 
          { return DATETIME;
          }
        case 146: break;
        case 22: 
          { return OPERATOR_TERNARY;
          }
        case 147: break;
        case 84: 
          { return RETURN;
          }
        case 148: break;
        case 90: 
          { return DELETE;
          }
        case 149: break;
        case 81: 
          { return SUPER;
          }
        case 150: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 151: break;
        case 21: 
          { return OPERATOR_NOT;
          }
        case 152: break;
        case 106: 
          { return UNDELETE;
          }
        case 153: break;
        case 78: 
          { return CLASS_KEYWORD;
          }
        case 154: break;
        case 91: 
          { return DOUBLE;
          }
        case 155: break;
        case 79: 
          { return CATCH;
          }
        case 156: break;
        case 16: 
          { return COMMA;
          }
        case 157: break;
        case 48: 
          { return ON;
          }
        case 158: break;
        case 46: 
          { return OPERATOR_BITWISE_EXCLUSIVE_OR2;
          }
        case 159: break;
        case 30: 
          { return OPERATOR_MULTIPLICATION_ASSIGNMENT;
          }
        case 160: break;
        case 113: 
          { return TYPEARGUMENTS;
          }
        case 161: break;
        case 87: 
          { return UPDATE;
          }
        case 162: break;
        case 43: 
          { return OPERATOR_OR;
          }
        case 163: break;
        case 86: 
          { return PUBLIC;
          }
        case 164: break;
        case 80: 
          { return AFTER;
          }
        case 165: break;
        case 65: 
          { return LONG;
          }
        case 166: break;
        case 63: 
          { return NULL;
          }
        case 167: break;
        case 33: 
          { return STRING_LITERAL;
          }
        case 168: break;
        case 109: 
          { return PROTECTED;
          }
        case 169: break;
        case 36: 
          { return OPERATOR_EQUALITY;
          }
        case 170: break;
        case 27: 
          { return OPERATOR_BITWISE_EXCLUSIVE_OR1;
          }
        case 171: break;
        case 68: 
          { return ENUM;
          }
        case 172: break;
        case 8: 
          { return DOT;
          }
        case 173: break;
        case 49: 
          { return DO;
          }
        case 174: break;
        case 15: 
          { return SEMI;
          }
        case 175: break;
        case 60: 
          { return COMMENT;
          }
        case 176: break;
        case 77: 
          { return FINAL;
          }
        case 177: break;
        case 7: 
          { return OPERATOR_SUBTRACTION;
          }
        case 178: break;
        case 41: 
          { return OPERATOR_AND;
          }
        case 179: break;
        case 76: 
          { return FALSE;
          }
        case 180: break;
        case 12: 
          { return RBRACE;
          }
        case 181: break;
        case 103: 
          { return TYPELIST;
          }
        case 182: break;
        case 23: 
          { return OPERATOR_COLON;
          }
        case 183: break;
        case 52: 
          { return NEW;
          }
        case 184: break;
        case 39: 
          { return OPERATOR_INEQUALITY;
          }
        case 185: break;
        case 44: 
          { return OPERATOR_ADDITION_ASSIGNMENT;
          }
        case 186: break;
        case 14: 
          { return RBRACK;
          }
        case 187: break;
        case 28: 
          { return LINE_COMMENT;
          }
        case 188: break;
        case 95: 
          { return SHARING;
          }
        case 189: break;
        case 104: 
          { return CONTINUE;
          }
        case 190: break;
        case 20: 
          { return OPERATOR_LESS_THAN;
          }
        case 191: break;
        case 72: 
          { return DATE;
          }
        case 192: break;
        case 89: 
          { return GLOBAL;
          }
        case 193: break;
        case 1: 
          { return INTEGER_LITERAL;
          }
        case 194: break;
        case 11: 
          { return LBRACE;
          }
        case 195: break;
        case 13: 
          { return LBRACK;
          }
        case 196: break;
        case 110: 
          { return INTERFACE;
          }
        case 197: break;
        case 17: 
          { return AT_SIGN;
          }
        case 198: break;
        case 4: 
          { return OPERATOR_DIVSION;
          }
        case 199: break;
        case 75: 
          { return THROW;
          }
        case 200: break;
        case 69: 
          { return ELSE;
          }
        case 201: break;
        case 92: 
          { return STRING;
          }
        case 202: break;
        case 45: 
          { return OPERATOR_INCREMENT;
          }
        case 203: break;
        case 47: 
          { return IF;
          }
        case 204: break;
        case 70: 
          { return WITH;
          }
        case 205: break;
        case 59: 
          { return MAP;
          }
        case 206: break;
        case 102: 
          { return INTEGER;
          }
        case 207: break;
        case 37: 
          { return OPERATOR_GREATER_THAN_EQUAL;
          }
        case 208: break;
        case 111: 
          { return INSTANCEOF;
          }
        case 209: break;
        case 55: 
          { return OPERATOR_BITWISE_SHIFT_RIGHT_ASSIGNMENT;
          }
        case 210: break;
        case 94: 
          { return FINALLY;
          }
        case 211: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 212: break;
        case 112: 
          { return IMPLEMENTS;
          }
        case 213: break;
        case 108: 
          { return TRANSIENT;
          }
        case 214: break;
        case 105: 
          { return ABSTRACT;
          }
        case 215: break;
        case 53: 
          { return FOR;
          }
        case 216: break;
        case 10: 
          { return RPAREN;
          }
        case 217: break;
        case 62: 
          { return THIS;
          }
        case 218: break;
        case 24: 
          { return OPERATOR_BITWISE_AND;
          }
        case 219: break;
        case 34: 
          { return OPERATOR_DECREMENT;
          }
        case 220: break;
        case 40: 
          { return OPERATOR_AND_ASSIGNMENT;
          }
        case 221: break;
        case 101: 
          { return DECIMAL;
          }
        case 222: break;
        case 100: 
          { return BOOLEAN;
          }
        case 223: break;
        case 96: 
          { return PRIVATE;
          }
        case 224: break;
        case 64: 
          { return LIST;
          }
        case 225: break;
        case 71: 
          { return BLOB;
          }
        case 226: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
