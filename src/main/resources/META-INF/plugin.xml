
<idea-plugin>
    <id>com.iishanto</id>
    <name>ApexJetforce</name>
    <vendor>IISHANTO</vendor>
    <description>Apex Jetforce Plugin to support apex class in the dev</description>

    <!-- Product and plugin compatibility requirements -->
    <!-- https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html -->
    <depends>com.intellij.modules.platform</depends>

    <extensions defaultExtensionNs="com.intellij">
            <fileType
                    name="Apex Class"
                    implementationClass="com.iishanto.language.ApexClassFileTypeProvider"
                    fieldName="INSTANCE"
                    language="Apex"
                    extensions="cls"/>
            <lang.parserDefinition
                    language="Apex"
                    implementationClass="com.iishanto.parser.ApexClassParserDefinition"/>
            <lang.syntaxHighlighterFactory
                    language="Apex"
                    implementationClass="com.iishanto.apex.filetypes.ApexSyntaxHighlighterFactory"/>
            <annotator
                    language="Apex"
                    implementationClass="com.iishanto.server.language.ide.ApexLanguageAnnotator"/>
            <postStartupActivity implementation="com.iishanto.project.SalesforceProjectStartupActivity"/>
    </extensions>
</idea-plugin>


<!--
an example how you can configure an plugin xml with you plugin
see also jetbrains documentation: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<!--<idea-plugin>-->
<!--    <id>com.iishanto</id>-->
<!--    <name>ApexJetforce</name>-->
<!--    <vendor>iishanto</vendor>-->
<!--    <description>Apex jetbrains plugin for intelisense</description>-->

<!--    &lt;!&ndash; Product and plugin compatibility requirements &ndash;&gt;-->
<!--    &lt;!&ndash; https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html &ndash;&gt;-->
<!--    <depends>com.intellij.modules.platform</depends>-->

<!--    <extensions defaultExtensionNs="com.intellij">-->
<!--                    <fileType-->
<!--                            name="Apex Class"-->
<!--                            implementationClass="com.iishanto.language.ApexClassFileTypeProvider"-->
<!--                            fieldName="INSTANCE"-->
<!--                            language="Apex"-->
<!--                            extensions="cls"/>-->
<!--                    <lang.parserDefinition-->
<!--                            language="Apex"-->
<!--                            implementationClass="com.iishanto.parser.ApexClassParserDefinition"/>-->
<!--                    <lang.syntaxHighlighterFactory-->
<!--                            language="Apex"-->
<!--                            implementationClass="com.iishanto.apex.filetypes.ApexSyntaxHighlighterFactory"/>-->
<!--        &lt;!&ndash; register a preloading activity. You need to init IntellijLanguageClient with your config, see readme &ndash;&gt;-->
<!--        <preloadingActivity implementation="com.iishanto.language.BallerinaPreloadingActivity" id="com.iishanto.language.BallerinaPreloadingActivity"/>-->

<!--        &lt;!&ndash; register intellijLanguageClient as a Service OR as a plugin component (see readme)... &ndash;&gt;-->
<!--        <applicationService serviceImplementation="org.wso2.lsp4intellij.IntellijLanguageClient"/>-->

<!--        &lt;!&ndash; register a listener on editor events, required for lsp file sync &ndash;&gt;-->
<!--        <editorFactoryListener implementation="org.wso2.lsp4intellij.listeners.LSPEditorListener"/>-->
<!--        <fileDocumentManagerListener implementation="org.wso2.lsp4intellij.listeners.LSPFileDocumentManagerListener"/>-->

<!--        &lt;!&ndash; for displaying notifications by lsp &ndash;&gt;-->
<!--        <notificationGroup id="lsp" displayType="STICKY_BALLOON"/>-->

<!--        &lt;!&ndash; for displaying progress notifications by lsp in the Event Log &ndash;&gt;-->
<!--        <notificationGroup id="LSPProgressNotification" displayType="NONE" />-->

<!--        &lt;!&ndash; for displaying the statusbar icon &ndash;&gt;-->
<!--        <statusBarWidgetFactory implementation="org.wso2.lsp4intellij.statusbar.LSPServerStatusWidgetFactory"-->
<!--                                id="org.wso2.lsp4intellij.statusbar.LSPServerStatusWidgetFactory"-->
<!--                                order="first" />-->

<!--        &lt;!&ndash; needed for completion &ndash;&gt;-->
<!--        <completion.contributor implementationClass="org.wso2.lsp4intellij.contributors.LSPCompletionContributor"-->
<!--                                id="org.wso2.lsp4intellij.contributors.LSPCompletionContributor" language="Apex"/>-->
<!--        &lt;!&ndash; needed for completion as well as signature help &ndash;&gt;-->
<!--        <typedHandler implementation="org.wso2.lsp4intellij.listeners.LSPTypedHandler"-->
<!--                      id="LSPTypedHandler"/>-->

<!--        &lt;!&ndash; needed for code diagnostics &ndash;&gt;-->
<!--        <externalAnnotator id="LSPAnnotator" language="Apex"-->
<!--                           implementationClass="org.wso2.lsp4intellij.contributors.annotator.LSPAnnotator"/>-->

<!--        &lt;!&ndash; needed for Workspace Symbols &ndash;&gt;-->
<!--        <gotoSymbolContributor implementation="org.wso2.lsp4intellij.contributors.symbol.LSPSymbolContributor"-->
<!--                               id="LSPSymbolContributor"/>-->

<!--        &lt;!&ndash; needed for renaming &ndash;&gt;-->
<!--        <renameHandler implementation="org.wso2.lsp4intellij.contributors.rename.LSPRenameHandler" id="LSPRenameHandler" order="first"/>-->
<!--        <renamePsiElementProcessor implementation="org.wso2.lsp4intellij.contributors.rename.LSPRenameProcessor" id="LSPRenameProcessor" order="first"/>-->

<!--        &lt;!&ndash; needed for folding support &ndash;&gt;-->
<!--        <lang.foldingBuilder language="Apex" implementationClass="org.wso2.lsp4intellij.contributors.LSPFoldingRangeProvider" id="LSPFoldingRangeProvider" order="first" />-->
<!--    </extensions>-->

<!--    <actions>-->
<!--        &lt;!&ndash; needed for hover &ndash;&gt;-->
<!--        <action id="org.intellij.sdk.action.QuickDocAction" class="org.wso2.lsp4intellij.actions.LSPQuickDocAction">-->
<!--        </action>-->

<!--        &lt;!&ndash; needed for find references &ndash;&gt;-->
<!--        <action class="org.wso2.lsp4intellij.actions.LSPReferencesAction" id="LSPFindUsages">-->
<!--            <keyboard-shortcut first-keystroke="shift alt F7" keymap="$default"/>-->
<!--        </action>-->
<!--    </actions>-->
<!--    <applicationListeners>-->
<!--        &lt;!&ndash; required for lsp file sync &ndash;&gt;-->
<!--        <listener class="org.wso2.lsp4intellij.listeners.VFSListener"-->
<!--                  topic="com.intellij.openapi.vfs.VirtualFileListener"/>-->
<!--        <listener class="org.wso2.lsp4intellij.listeners.LSPProjectManagerListener"-->
<!--                  topic="com.intellij.openapi.project.ProjectManagerListener"/>-->
<!--    </applicationListeners>-->
<!--</idea-plugin>-->